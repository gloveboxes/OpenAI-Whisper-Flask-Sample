"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[163],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),h=o,d=m["".concat(l,".").concat(h)]||m[h]||u[h]||i;return n?a.createElement(d,r(r({ref:t},c),{},{components:n})):a.createElement(d,r({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3866:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(4137));const i={},r="Intro to OpenAI Functions",s={unversionedId:"OpenAI-Functions",id:"OpenAI-Functions",title:"Intro to OpenAI Functions",description:"This sample uses OpenAI Functions extensive to power the home assistant. OpenAI Functions enables you to describe functions to gpt-3.5-turbo-0613 and gpt-4-0613 models and later, and have the GPT model intelligently select which function (if any) best matches the data in the prompt. The function definitions along with the prompt are passed to the OpenAI Chat Completion API. The GPT model then determines which function best matches the prompt and populates a JSON object using the function JSON schema and prompt data. If there is a successful match, the chat completion API returns the function name and the JSON object/entity.",source:"@site/docs/15-OpenAI-Functions.md",sourceDirName:".",slug:"/OpenAI-Functions",permalink:"/OpenAI-Whisper-Transcriber-Sample/OpenAI-Functions",draft:!1,editUrl:"https://github.com/gloveboxes/OpenAI-Whisper-Transcriber-Sample/tree/master/docs/docs/15-OpenAI-Functions.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/OpenAI-Whisper-Transcriber-Sample/"},next:{title:"Start the Home Assistant",permalink:"/OpenAI-Whisper-Transcriber-Sample/Assistant"}},l={},p=[{value:"OpenAI Function Examples",id:"openai-function-examples",level:3},{value:"Home assistant OpenAI Functions",id:"home-assistant-openai-functions",level:2},{value:"How the code works",id:"how-the-code-works",level:3}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"intro-to-openai-functions"},"Intro to OpenAI Functions"),(0,o.kt)("p",null,"This sample uses OpenAI Functions extensive to power the home assistant. OpenAI Functions enables you to describe functions to gpt-3.5-turbo-0613 and gpt-4-0613 models and later, and have the GPT model intelligently select which function (if any) best matches the data in the prompt. The function definitions along with the prompt are passed to the OpenAI Chat Completion API. The GPT model then determines which function best matches the prompt and populates a JSON object using the function JSON schema and prompt data. If there is a successful match, the chat completion API returns the function name and the JSON object/entity."),(0,o.kt)("p",null,"It's important to note that the model doesn't magically call the function on your behalf, that's your codes job, you are returned a function name and arguments and it's up to your code to determine what to do with the data. You can read more about OpenAI Functions in the ",(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/docs/guides/gpt/function-calling"},"OpenAI Functions documentation"),"."),(0,o.kt)("h3",{id:"openai-function-examples"},"OpenAI Function Examples"),(0,o.kt)("p",null,"Here are two examples of OpenAI Functions. Take a moment to review the following JSON OpenAI Function definitions, you'll see a function name, description, parameters and and a series of properties that describe the function and its schema. You can define and pass multiple function definitions to the OpenAI Chat Completion API."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "get_current_weather",\n    "description": "Get the current weather in a given location",\n    "parameters": {\n        "type": "object",\n        "properties": {\n            "location": {\n                "type": "string",\n                "description": "The city and state, e.g. San Francisco, CA"\n            },\n            "unit": {\n                "type": "string",\n                "enum": ["celsius", "fahrenheit"]\n            }\n        },\n        "required": ["location"]\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'light_state = {\n    "name": "set_light_state",\n    "description": "Turn a light on or off and sets it to a given color and brightness",\n    "parameters": {\n        "type": "object",\n        "properties": {\n            "device": {\n                "type": "string",\n                "description": "The name of the light"\n            },\n            "state": {\n                "type": "string",\n                "enum": ["on", "off"]\n            },\n            "brightness": {\n                "type": "string",\n                "enum": ["low", "medium", "high"]\n            },\n            "color": {\n                "type": "string",\n                "enum": ["red", "white", "blue", "green", "yellow", "purple", "orange", "pink", "cyan", "magenta", "lime", "indigo", "teal", "olive", "brown", "black", "grey", "silver", "gold", "bronze", "platinum", "rainbow"]\n            }\n        },\n        "required": ["device"]\n    }\n}\n')),(0,o.kt)("h2",{id:"home-assistant-openai-functions"},"Home assistant OpenAI Functions"),(0,o.kt)("p",null,"This home assistant uses the following OpenAI Functions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"get_current_weather: Weather data is from ",(0,o.kt)("a",{parentName:"li",href:"https://www.weatherapi.com/"},"https://www.weatherapi.com/")," and is used to ground a GPT prompts."),(0,o.kt)("li",{parentName:"ul"},"light_state: for controlling imaginary lights"),(0,o.kt)("li",{parentName:"ul"},"washing_machine_state: for controlling imaginary washing machines"),(0,o.kt)("li",{parentName:"ul"},"lock_state: for controlling imaginary locks")),(0,o.kt)("h3",{id:"how-the-code-works"},"How the code works"),(0,o.kt)("p",null,"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"openai.ChatCompletion.create")," function is called, "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"openai_functions")," variable is passed to the ",(0,o.kt)("inlineCode",{parentName:"li"},"functions")," parameter. The ",(0,o.kt)("inlineCode",{parentName:"li"},"functions")," parameter is a list of OpenAI Function definitions. "),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"messages")," parameter is a list of messages that are passed to the GPT model. The ",(0,o.kt)("inlineCode",{parentName:"li"},"messages")," parameter contains the role, and content of the message. The ",(0,o.kt)("inlineCode",{parentName:"li"},"role")," parameter is either ",(0,o.kt)("inlineCode",{parentName:"li"},"system"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"user"),", or ",(0,o.kt)("inlineCode",{parentName:"li"},"assistant"),". The ",(0,o.kt)("inlineCode",{parentName:"li"},"content")," parameter is the message text. "),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"temperature")," parameter is the temperature of the GPT model. "),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"max_tokens")," parameter is the maximum number of tokens to return.")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"openai.ChatCompletion.create")," function returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"response")," object. - The ",(0,o.kt)("inlineCode",{parentName:"p"},"response")," object contains the ",(0,o.kt)("inlineCode",{parentName:"p"},"choices")," object. "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"choices")," object contains the ",(0,o.kt)("inlineCode",{parentName:"li"},"text")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"index")," of the response. "),(0,o.kt)("li",{parentName:"ul"},"If a function is matched, a ",(0,o.kt)("inlineCode",{parentName:"li"},"function_call`` object is returned. The "),"function_call",(0,o.kt)("inlineCode",{parentName:"li"},"object contains the"),"function",(0,o.kt)("inlineCode",{parentName:"li"},"name and"),"arguments` object.")),(0,o.kt)("p",null,"To learn more about OpenAI Functions, see the ",(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/docs/guides/gpt/function-calling"},"OpenAI Functions documentation"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'response_1 = openai.ChatCompletion.create(\n    model="gpt-3.5-turbo-0613",\n    messages=[\n        {"role": "system", "content": "You are a home automation assistant and you can only help with home automation. Device types limited to those listed in functions. Ask for the device name. Device names have no spaces."},\n        {"role": "system", "content": "Start all responses with \'I\'m a home automation assistant\'."},\n        {"role": "assistant", "content": last_assistant_message},\n        {"role": "user", "content": text},\n    ],\n    functions=openai_functions,\n    temperature=0.0,\n    max_tokens=OPENAI_MAX_TOKENS,\n)\n')))}u.isMDXComponent=!0}}]);